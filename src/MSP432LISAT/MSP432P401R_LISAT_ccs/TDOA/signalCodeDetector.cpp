/*
 * signalCodeDetector.cpp
 *
 *  Created on: Nov 12, 2020
 *      Author: david
 */
#include <common.h>

#include <TDOA/signalCodeDetector.h>

int16_t processSingleBuffer(q15_t* micBuffer, int16_t bufferLength, q15_t *chirp, uint32_t chip_length, uint32_t num_chirps);

valin_tdoa_input processThreeLongBuffer(q15_t* micBuffer1L, q15_t* micBuffer2M, q15_t* micBuffer3R, int16_t bufferLength)
{
    // Signal parameters
    // Chirp 5 kHz to 15 kHz in 2 ms, sampled at 44kHz
//    q15_t chirp[] = {32767, 24588, 3608, -19680, -32371, -26453, -4453, 20684, 32722, 22828, -3186, -27245, -31190, -11002, 18248, 32751, 19465, -11102, -31926, -23133, 8000, 31513, 23169, -9487, -32228, -19594, 15328, 32707, 11251, -24091, -29536, 2814, 31668, 18204, -20311, -30531, 2973, 32274, 13418, -26007, -25041, 15750, 31123, -4927, -32767, -4400, 31722, 11401, -29627, -16030, 27679, 18556, -26609, -19252, 26732, 18204, -28016, -15282, 30065, 10196, -32063, -2709, 32711, -7018, -30314, 17938, 23169, -27709, -10449, 32687, -6549, -28936, 23319, 14524, -32519, 7431, 27096, -27245, -6132, 31913, -20144, -14525, 32766, -15376, -18072, 32687, -14572, -17491};

    // Chirp 1-2kHz, 17ms, num_chirps 2, at 39kHz
    q15_t chirp[] = {32767, 32333, 31009, 28777, 25649, 21673, 16928, 11533, 5642, -556, -6843, -12978, -18703, -23757, -27889, -30867, -32498, -32638, -31211, -28214, -23730, -17930, -11075, -3503, 4376, 12105, 19205, 25203, 29665, 32234, 32659, 30827, 26781, 20732, 13061, 4297, -4909, -13828, -21713, -27860, -31675, -32741, -30867, -26126, -18872, -9723, 479, 10739, 20002, 27262, 31677, 32676, 30042, 23966, 15052, 4273, -7123, -17750, -26251, -31478, -32657, -29521, -22372, -12087, -22, 12149, 22664, 29923, 32753, 30605, 23688, 12973, 89, -12912, -23872, -30891, -32668, -28768, -19747, -7108, 6924, 19775, 28995, 32737, 30149, 21601, 8671, -6109, -19734, -29328, -32767, -29181, -19203, -4909, 10581, 23764, 31550, 32005, 24874, 11719, -4373, -19486, -29818, -32657, -27128, -14510, 2007, 18086, 29371, 32684, 26958, 13635, -3638, -19962, -30568, -32226, -24283, -8968, 9169, 24571, 32372, 29975, 17973, 89, -17917, -30083, -32236, -23481, -6641, 12584, 27499, 32752, 26309, 10317, -9525, -25943, -32747, -27221, -11284, 9078, 25997, 32763, 26531, 9612, -11284, -27648, -32636, -23997, -5184, 15922, 30260, 31495, 18901, -2131, -22297, -32466, -27860, -10398, 11972, 28811, 32065, 19996, -1773, -22765, -32648, -26374, -6874, 16172, 31065, 30042, 13432, -10269, -28638, -31825, -17930, 5729, 26342, 32512, 20633, -2853, -24810, -32702, -21826, 1736, 24364, 32714, 21661, -2401, -25094, -32591, -20120, 4833, 26854, 32075, 17003, -8968, -29253, -30642, -12021, 14569, 31578, 27533, 4935, -21079, -32762, -21915, 4170, 27416, 31422, 13148, -14574, -31885, -26126, -1272, 24587, 32302, 15936, -12449, -31491, -26585, -1264, 25100, 32001, 13845, -15283, -32345, -23581, 4194, 28639, 29769, 6441, -22273, -32511, -15522, 14605, 32399, 22537, -6742, -30251, -27445, -556, 26886, 30499, 6846, -23021, -32107, -11954, 19205, 32710, 15874, -15829, -32721, -18703, 13141, 32470, 20565, -11292, -32207, -21581, 10355, 32078, 21822, -10367, -32148, -21310, 11324, 32381, 20002, -13197, -32658, -17810, 15901, 32760, 14605, -19293, -32381, -10269, 23114, 31130, 4730, -26975, -28572, 1951, 30318, 24274, -9518, -32430, -17924, 17416, 32481, 9452, -24763, -29664, 790, 30342, 23388, -11895, -32753, -13575, 22322, 30681, 941, -30016, -23353, 12768, 32755, 11047, -24831, -28814, 4447, 31972, 17792, -19747, -31302, -1407, 30396, 21583, -16246, -32183, -4475, 29364, 23023, -15007, -32332, -4767, 29480, 22432, -16218, -31962, -2290, 30681, 19673, -19696, -30593, 2983, 32234, 14219, -24768, -27128, 10845, 32655, 5501, -29965, -20120, 20310, 29772, -6399, -32748, -8484, 28972, 21276, -19747, -29745, 7227, 32763, 6136, -30323, -18110, 23316, 27012, -13211, -31892, 1697, 32512, 9612, -29253, -19402, 22910, 26767, -14510, -31245, 5116, 32765, 4297, -31575, -12948, 28130, 20279, -22999, -25967, 16771, 29891, -10004, -32103, 3166, 32766, 3372, -32128, -9350, 30461, 14605, -28051, -19067, 25157, 22727, -22015, -25633, 18816, 27861, -15718, -29510, 12834, 30681, -10254, -31480, 8032, 31995, -6211, -32310, 4809, 32487, -3843, -32577, 3316, 32608, -3234, -32595, 3593, 32529, -4396, -32390, 5635, 32132, -7302, -31702, 9376, 31019, -11828, -30000, 14605, 28541, -17636, -26543, 20812, 23901, -23997, -20532, 27008, 16373, -29630, -11411, 31607, 5689, -32666, 662, 32520, -7426, -30915, 14269, 27645, -20761, -22616, 26371, 15874, -30519, -7666, 32615, -1543, -32154, 11047, 28796, -19943, -22483, 27183, 13519, -31710, -2647, 32614, -8968, -29342, 19800, 21875, -28161, -10895, 32456, -2187, -31539, 15306, 25044, -26049, -13669, 32078, -755, -31710, 15419, 24449, -27038, -11389, 32582, -4767, -30161, 20103, 19775, -30404, -3693, 32350, -13828, -24742, 27533, 9269, -32767, 9551, 27187, -25504, -12021, 32689, -7821, -27860, 25070, 12135, -32717, 8779, 27012, -26374, -9624, 32737, -12353, -24331, 28972, 4305, -31935, 18145, 19024, -31736, 3910, 28845, -25094, -10216, 32691, -14431, -21683, 31019, -2306, -29181, 25203, 9200, -32502, 16928, 18744, -32198, 7754, 25724, -29210, -1129, 30118, -24564, -8968, 32281, -19177, -15402, 32752, -13763, -20370, 32107, -8814, -23997, 30873, -4633, -26501, 29480, -1376, -28120, 28251, 893, -29064, 27407, 2158, -29482, 27075, 2420, -29451, 27302, 1681, -28964, 28056, -62, -27935, 29225, -2806, -26203, 30608, -6516, -23553, 31903, -11090, -19747, 32698, -16308, -14574, 32484, -21784, -7929, 30687, -26921, 89, 26753, -30902, 9070, 20279, -32740, 18198, 11197, -31420, 26224, -14, -26141, 31550, -12161, -16666, 32503, -23292, -3693, 27802, -30902, 10875, 17173, -32480, 23961, 1951, -26384, 31842, -14638, -12853, 31255, -27860, 5234, 20910, -32753, 22444, 2872, -26203, 32168, -17048, -9105, 29304, -30689, 12584, 13388, -30912, 29211, -9548, -15878, 31607, -28307, 8156, 16744, -31749, 28251, -8484, -16066, 31422, -29064, 10513, 13780, -30437, 30496, -14130, -9723, 28340, -32017, 19024, 3728, -24490};
    int16_t chirp_length = 663;
    int16_t num_chirps = 2;

    valin_tdoa_input TODAs;

    int16_t arrival_times[3];
    q15_t* buffers[3] = {micBuffer1L, micBuffer2M, micBuffer3R};

    for(int16_t i = 0; i < 3; i++)
    {
        arrival_times[i] = processSingleBuffer(buffers[i], bufferLength, chirp, chirp_length, num_chirps);
    }

    TODAs.tdoa1 = arrival_times[2] - arrival_times[1];
    TODAs.tdoa2 = arrival_times[3] - arrival_times[1];
    return TODAs;
}

int16_t processSingleBuffer(q15_t* micBuffer, int16_t bufferLength, q15_t *chirp, uint32_t chip_length, uint32_t num_chirps)
{
    uint32_t correlation_buffer_length =  2* bufferLength -1;
    q15_t correlation_buffer[correlation_buffer_length];
    q15_t pulse_values;
    uint32_t pulse_delay;
    q15_t pulse_delays[num_chirps];
    uint16_t zeroing_range = 50;

    // correlate chirp with the buffer
    arm_correlate_q15(chirp, CHIRP_SAMPLE_COUNT, micBuffer, bufferLength, correlation_buffer);

    for(int16_t i = 0; i < num_chirps; i++)
    {
        // find highest peak in correlation buffer
        arm_max_q15(correlation_buffer, correlation_buffer_length, &pulse_values, &pulse_delay);

        // store time value of highest peak
        pulse_delays[i] = pulse_delay;

        // clear highest peak and surrounding samples
        for(int16_t j = pulse_delay - zeroing_range; j < pulse_delay + zeroing_range; j++)
        {
            if(j < 0) {
                j = 0;
            }
            else if (j >= correlation_buffer_length){
                break;
            }
            else {
                correlation_buffer[j] = 0;
            }
        }
    }

    // compute mean time
    int16_t final_pulse_delays[num_chirps];
    final_pulse_delays[0] = pulse_delays[0];
    final_pulse_delays[1] = pulse_delays[1];
    final_pulse_delays[2] = pulse_delays[2];
    final_pulse_delays[3] = pulse_delays[3];
    final_pulse_delays[4] = pulse_delays[4];
    final_pulse_delays[5] = pulse_delays[5];
    q15_t mean_delay;

    arm_mean_q15(final_pulse_delays, (uint32_t)num_chirps, &mean_delay);
    return mean_delay;
}
